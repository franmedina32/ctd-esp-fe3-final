{"ast":null,"code":"var _jsxFileName = \"/Users/fran/Desktop/fe3-final/src/Components/utils/global.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialState = {\n  theme: \"\",\n  data: []\n};\nexport const ContextGlobal = /*#__PURE__*/createContext(initialState);\nexport const ContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const [theme, setTheme] = useState('light');\n  const [data, setData] = useState();\n  const url = \"https://jsonplaceholder.typicode.com/users\";\n\n  const toggleTheme = () => {\n    setTheme(theme === 'light' ? 'dark' : 'light');\n  };\n\n  useEffect(() => {\n    fetch(url).then(res => res.json()).then(dataRes => setData(dataRes));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {\n      theme,\n      setTheme,\n      data,\n      setData,\n      initialState,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"YDqK7bQuq3/vyZm671+2FHX9V+4=\");\n\n_c = ContextProvider;\nexport default ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","initialState","theme","data","ContextGlobal","ContextProvider","children","setTheme","setData","url","toggleTheme","fetch","then","res","json","dataRes"],"sources":["/Users/fran/Desktop/fe3-final/src/Components/utils/global.context.jsx"],"sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\";\n\nexport const initialState = {theme: \"\", data: []}\n\nexport const ContextGlobal = createContext(initialState);\n\n\n\nexport const ContextProvider = ({ children }) => {\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const [theme, setTheme] = useState('light')\n  const [data,setData] = useState()\n  const url = \"https://jsonplaceholder.typicode.com/users\";\n\n  const toggleTheme = () => {\n    setTheme(theme === 'light' ? 'dark' : 'light');\n  };\n\n  useEffect(()=> {\n    fetch(url)\n       .then(res => res.json())\n       .then(dataRes => setData(dataRes))\n  },[])\n\n\n  return (\n    <ContextGlobal.Provider value={{theme,setTheme,data,setData,initialState,toggleTheme}}>\n      {children}\n    </ContextGlobal.Provider>\n  ); \n};\n\nexport default ContextProvider\n\n"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,SAApC,EAA+CC,QAA/C,QAA+D,OAA/D;;AAEA,OAAO,MAAMC,YAAY,GAAG;EAACC,KAAK,EAAE,EAAR;EAAYC,IAAI,EAAE;AAAlB,CAArB;AAEP,OAAO,MAAMC,aAAa,gBAAGP,aAAa,CAACI,YAAD,CAAnC;AAIP,OAAO,MAAMI,eAAe,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC/C;EACA,MAAM,CAACJ,KAAD,EAAQK,QAAR,IAAoBP,QAAQ,CAAC,OAAD,CAAlC;EACA,MAAM,CAACG,IAAD,EAAMK,OAAN,IAAiBR,QAAQ,EAA/B;EACA,MAAMS,GAAG,GAAG,4CAAZ;;EAEA,MAAMC,WAAW,GAAG,MAAM;IACxBH,QAAQ,CAACL,KAAK,KAAK,OAAV,GAAoB,MAApB,GAA6B,OAA9B,CAAR;EACD,CAFD;;EAIAH,SAAS,CAAC,MAAK;IACbY,KAAK,CAACF,GAAD,CAAL,CACIG,IADJ,CACSC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADhB,EAEIF,IAFJ,CAESG,OAAO,IAAIP,OAAO,CAACO,OAAD,CAF3B;EAGD,CAJQ,EAIP,EAJO,CAAT;EAOA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE;MAACb,KAAD;MAAOK,QAAP;MAAgBJ,IAAhB;MAAqBK,OAArB;MAA6BP,YAA7B;MAA0CS;IAA1C,CAA/B;IAAA,UACGJ;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAtBM;;GAAMD,e;;KAAAA,e;AAwBb,eAAeA,eAAf"},"metadata":{},"sourceType":"module"}